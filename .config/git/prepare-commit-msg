#!/usr/bin/env bash
# Git pre-commit-msg hook with LLM integration
# This hook generates commit messages using LLM if available, falls back gracefully if not

# Tools required `brew install llm && llm install llm-github-copilot`
# `llm github_copilot auth login` to authenticate

set -euo pipefail

COMMIT_MSG_FILE="$1"
COMMIT_SOURCE="${2:-}"
COMMIT_SHA="${3:-}"

# Configuration
LLM_MODEL="${LLM_MODEL:-github_copilot/gpt-4o-mini}"
MAX_DIFF_SIZE=50000 # Maximum diff size to send to LLM (in characters)
TIMEOUT=30          # Timeout for LLM command in seconds

# Colors for output
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color

LOG_FILE=/tmp/pre-commit-msg.log

log_info() {
  echo -e "${GREEN}[pre-commit-msg]${NC} $1" >&2 >>$LOG_FILE
}

log_warn() {
  echo -e "${YELLOW}[pre-commit-msg]${NC} $1" >&2 >>$LOG_FILE
}

log_error() {
  echo -e "${RED}[pre-commit-msg]${NC} $1" >&2 >>$LOG_FILE
}

# Function to check if a command exists
command_exists() {
  command -v "$1" >/dev/null 2>&1
}

# Function to get staged diff with size limit
get_staged_diff() {
  local diff
  diff=$(git diff --staged --no-color)

  if [ ${#diff} -gt $MAX_DIFF_SIZE ]; then
    log_warn "Diff too large (${#diff} chars), using summary instead"
    git diff --staged --stat --no-color
  else
    echo "$diff"
  fi
}

# Function to generate commit message using LLM
generate_commit_message() {
  local diff="$1"
  local prompt="Please generate a concise, conventional commit message for these changes. Follow conventional commit format (type: description). Keep it under 50 characters for the subject line and add emojis if appropriate:

$diff"

  # Use timeout to prevent hanging
  timeout "$TIMEOUT" llm --model "$LLM_MODEL" "$prompt" 2>/dev/null || return 1
  # llm --model "$LLM_MODEL" "$prompt" || return 1
}

main() {
  # Skip if this is not a regular commit (merge, squash, etc.)
  if [ -n "$COMMIT_SOURCE" ] && [ "$COMMIT_SOURCE" != "message" ] && [ "$COMMIT_SOURCE" != "template" ]; then
    log_info "Skipping LLM generation for $COMMIT_SOURCE commit"
    exit 0
  fi

  # Skip if commit message already exists and is not empty/template
  if [ -s "$COMMIT_MSG_FILE" ]; then
    existing_msg=$(head -1 "$COMMIT_MSG_FILE" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
    if [ -n "$existing_msg" ] && [ "$existing_msg" != "#" ] && ! echo "$existing_msg" | grep -q "^#"; then
      log_info "Commit message already exists, skipping LLM generation"
      exit 0
    fi
  fi

  if ! command_exists llm; then
    log_warn "llm command not found, skipping automatic commit message generation"
    exit 0
  fi

  # Get staged changes
  staged_diff=$(get_staged_diff)

  if [ -z "$staged_diff" ]; then
    log_warn "No staged changes found"
    exit 0
  fi

  log_info "Generating commit message with LLM..."

  # Generate commit message
  generated_msg=$(generate_commit_message "$staged_diff")
  exit_code=$?

  if [ $exit_code -ne 0 ]; then
    log_warn "LLM command failed or timed out, skipping automatic generation"
    exit 0
  fi

  # Clean up the generated message
  generated_msg=$(echo "$generated_msg" | head -1 | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')

  # Write the generated message to the commit message file
  {
    echo "$generated_msg"
    echo ""
    echo "# Generated by pre-commit-msg hook using $LLM_MODEL"
    echo "# Edit the message above as needed"
    if [ -s "$COMMIT_MSG_FILE" ]; then
      echo ""
      echo "# Original template:"
      sed 's/^/# /' "$COMMIT_MSG_FILE"
    fi
  } >"${COMMIT_MSG_FILE}.tmp"

  mv "${COMMIT_MSG_FILE}.tmp" "$COMMIT_MSG_FILE"

  log_info "Generated commit message: $generated_msg"
}

# Run main function with error handling
if ! main "$@"; then
  log_error "Hook failed, but allowing commit to proceed"
  exit 0
fi

