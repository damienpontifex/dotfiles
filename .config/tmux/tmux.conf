# Rebind prefix key to Ctrl+a
unbind C-b
set-option -g prefix C-a
bind C-a send-prefix

# Start all numbering from 1 instead of 0
set-option -g base-index 1
set-option -g pane-base-index 1

# renumber windows when a window is closed
set-option -g renumber-windows on

# True colours support
set-option -g default-terminal "${TERM}"
set -sg terminal-overrides ",*:RGB"
# set-option -sa terminal-overrides ",xterm*:Tc"

# Rather than constraining window size to the maximum size of any client 
# connected to the *session*, constrain window size to the maximum size of any 
# client connected to *that window*. Much more reasonable.
setw -g aggressive-resize on

set-option -g focus-events on

# Escape timeout to help with neovim
set-option -sg escape-time 10

# Pane resizing
bind -r < resize-pane -L 1 # Ctrl+b, Shift+,
bind -r > resize-pane -R 1 # Ctrl+b, Shift+.
bind -r - resize-pane -D 1 # Ctrl+b, -
bind -r + resize-pane -U 1 # Ctrl+b, Shift+=

# Use vi key bindings in copy mode
set-window-option -g mode-keys vi

# Enable mouse support including pane focusing and selection support.
set-option -g mouse on
unbind-key -Tcopy-mode-vi MouseDragEnd1Pane
bind-key -Tcopy-mode-vi MouseDown1Pane send -X clear-selection

# Increase history limit so we have a larger scrollback buffer
set-option -g history-limit 100000
# tmux messages are displayed for 4 seconds
set-option -g display-time 4000

# Terminal title display
set-option -g set-titles on
set-option -g set-titles-string "#{session_name}"
# set-option -g set-titles-string "#{session_name} - #{host}"

bind-key Escape copy-mode
# Use Vim style commands for copy and paste
bind-key -T copy-mode-vi y send-keys -X copy-selection
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi V send-keys -X select-line

########################
###### Navigation ######
########################
# Alt + l/h for cycling through windows without prefix key
bind-key -n M-l next-window
bind-key -n M-h previous-window
bind-key -n M-Tab next-window

# Ctrl+Shift+Left/Right to move window left/right and select it
bind-key -n C-S-Left swap-window -t -1\; select-window -t -1
bind-key -n C-S-Right swap-window -t +1\; select-window -t +1

# Window split key bindings and open new pane in same as current pane directory
bind | split-window -h -c '#{pane_current_path}'
bind _ split-window -v -c '#{pane_current_path}'
bind c new-window -c '#{pane_current_path}'

# Moving panes and windows with tree chooser
bind-key W choose-tree -Zw "swap-window -t '%%'"
bind-key P choose-tree -Zw "swap-pane -t '%%'"
bind-key C-p choose-tree -Zw "move-pane -t '%%'"

# Moving panes and windows with help text prompt
bind-key C-M-w command-prompt -p "Swap current window to? (e.g. 3; 4; session_name:5)" "swap-window -t '%%'"
bind-key C-M-p command-prompt -p "Swap current pane to? (e.g. 2.0; session_name:4.0)" "swap-pane -t '%%'"
bind-key M-p command-prompt -p "Move current pane to? (e.g. 3.1; session_name:6.0)" "move-pane -t '%%'"

# Pane navigation with hjkl
bind-key h select-pane -L
bind-key j select-pane -D
bind-key k select-pane -U
bind-key l select-pane -R
############################
###### Display Popups ######
############################
bind-key C-z display-popup -w 80% -h 80% -E 'nvim ~/.zshrc'
bind-key C-t display-popup -d '#{pane_current_path}' -E zsh
bind-key C-g display-popup -w 80% -h 80% -d '#{pane_current_path}' -E lazygit

####################
###### Design ######
####################
# Design: Status bar

# show-option -g <option> # To see current option value
# Basic colors of the Statusbar
set-option -g status-style bg=#007ACC,fg=white,bright

# set-option -g status-left "[#S] "
set-option -g status-right '%a %H:%M %Y-%m-%d '

# Show the window list centered between the left and the right section
set-option -g status-justify absolute-centre

# set-option -g window-status-format "·"
set-option -g window-status-current-format "#[bg=#15825D] 󰈙 #I: #W "
# window-status-format "#I:#W#{?window_flags,#{window_flags}, }"

set-option -g pane-border-lines simple
set-option -g pane-border-style fg=black,bright
set-option -g pane-active-border-style fg=magenta

# Window naming to current path
set-option -g status-interval 5
set-option -g automatic-rename on
set-option -g automatic-rename-format '#{b:pane_current_path}'
# set-option -g automatic-rename-format '#(git -C "#{pane_current_path}" rev-parse --show-toplevel > /dev/null 2>&1 && printf "%s:%s\n" "#(basename "$(git -C "#{pane_current_path}" rev-parse --show-toplevel)")" "#(basename "#{pane_current_path}")" || printf "%s\n" "#(basename "#{pane_current_path}")")'

###### Plugins ######
set-option -g @continuum-restore 'on'

set-option -g @plugin 'tmux-plugins/tpm'
set-option -g @plugin 'tmux-plugins/tmux-yank'
set-option -g @plugin 'tmux-plugins/tmux-resurrect'
set-option -g @plugin 'tmux-plugins/tmux-continuum'

run '~/.tmux/plugins/tpm/tpm'

bind r source-file ~/.config/tmux/tmux.conf \; display-message "Config reloaded..."
